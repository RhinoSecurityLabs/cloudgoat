name: Terraform Compatibility Test

on:
  pull_request:
    paths:
      - "Dockerfile"
      - "requirements.txt"
      - "scenarios/**"
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform_version: [0.14.11, 1.0.11, 1.10.0] # Add other critical versions if needed
    steps:
      - uses: actions/checkout@v3

      - name: Install Terraform ${{ matrix.terraform_version }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform_version }}
          
      - name: Find and Validate Terraform Configurations
        run: |
          find cloudgoat/scenarios -type d -name "terraform" | while read dir; do
            echo "Testing Terraform in $dir"
            cd "$dir"
            # Backup existing provider.tf (if it exists)
            if [ -f "provider.tf" ]; then
              cp provider.tf provider.tf.bak
            fi

            # 1. Remove any reference to 'profile = var.profile' from ALL .tf files
            find . -name "*.tf" -exec sed -i '/profile\s*=\s*var.profile/d' {} +

            # 2. Remove 'variable "profile"' block from variables.tf if present
            if [ -f "variables.tf" ]; then
              sed -i '/variable "profile"/,/}/d' variables.tf
            fi

            # 3. Delete terraform.tfvars or any other auto.tfvars files
            find . -name "*.tfvars" -exec rm -f {} +

            # Modify provider.tf (if it contains an AWS provider block)
            if grep -q 'provider "aws"' provider.tf 2>/dev/null; then
              # Ensure required AWS settings are included
              sed -i '/provider "aws"/,/}/ s/}/  skip_credentials_validation = true\n  skip_requesting_account_id  = true\n  skip_metadata_api_check     = true\n  access_key                  = "mock_access_key"\n  secret_key                  = "mock_secret_key"\n}/' provider.tf
            else
              # Append the provider block if it doesn't exist
              cat <<EOT >> provider.tf

          provider "aws" {
            region                      = "us-east-1"
            skip_credentials_validation = true
            skip_requesting_account_id  = true
            skip_metadata_api_check     = true
            access_key                  = "mock_access_key"
            secret_key                  = "mock_secret_key"
          }
          EOT
            fi

            # Run checks
            terraform init -backend=false
            terraform validate
            terraform plan -out=tfplan -var="cgid=github-ci-test" || echo "Plan failed for $dir"
            
            # Restore original provider.tf after testing
            if [ -f "provider.tf.bak" ]; then
              mv provider.tf.bak provider.tf
            fi

            cd - > /dev/null
          done