name: Terraform Compatibility Test

on:
  pull_request:
    paths:
      - "Dockerfile"
      - "requirements.txt"
      - "scenarios/**"
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform_version: [0.14.11, 1.0.11, 1.10.0] # Add other critical versions if needed
    steps:
      - uses: actions/checkout@v3

      - name: Install Terraform ${{ matrix.terraform_version }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform_version }}

      - name: Set up Fake AWS Profile
        run: |
          mkdir -p ~/.aws
          echo '[fake-ci-profile]' > ~/.aws/config
          echo '[fake-ci-profile]' > ~/.aws/credentials
          echo 'aws_access_key_id = mock_access_key' >> ~/.aws/credentials
          echo 'aws_secret_access_key = mock_secret_key' >> ~/.aws/credentials
          export AWS_PROFILE=fake-ci-profile

      - name: Find and Validate Terraform Configurations
        run: |
          find cloudgoat/scenarios -type d -name "terraform" | while read dir; do
            echo "Testing Terraform in $dir"
            cd "$dir"

            # Backup provider.tf if it exists
            if [ -f "provider.tf" ]; then
              cp provider.tf provider.tf.bak
            fi

            # Remove any reference to 'data "aws_caller_identity"' (which forces API calls)
            find . -name "*.tf" -exec sed -i '/data "aws_caller_identity"/,/}/d' {} +

            # Modify provider.tf (shim in credentials skipping, but don't overwrite the file)
            if grep -q 'provider "aws"' provider.tf 2>/dev/null; then
              # Ensure required AWS settings are included
              sed -i '/provider "aws"/,/}/ s/}/  skip_credentials_validation = true\n  skip_requesting_account_id  = true\n  skip_metadata_api_check     = true\n  skip_get_ec2_platforms      = true\n  skip_region_validation      = true\n  access_key                  = "mock_access_key"\n  secret_key                  = "mock_secret_key"\n}/' provider.tf
            else
              # Append AWS provider if missing
              cat <<EOT >> provider.tf

          provider "aws" {
            region                      = "us-east-1"
            skip_credentials_validation = true
            skip_requesting_account_id  = true
            skip_metadata_api_check     = true
            skip_get_ec2_platforms      = true
            skip_region_validation      = true
            access_key                  = "mock_access_key"
            secret_key                  = "mock_secret_key"
          }
          EOT
            fi

            # Correctly set the backend override
            cat <<EOT > backend_override.tf
          terraform {
            backend "local" {
              path = "terraform.tfstate"
            }
          }
          EOT

            terraform init -backend=false
            terraform validate
            terraform plan -out=tfplan -var="cgid=github-ci-test" -var="profile=fake-ci-profile" || echo "Plan failed for $dir"

            # Restore original provider.tf
            if [ -f "provider.tf.bak" ]; then
              mv provider.tf.bak provider.tf
            fi

            cd - > /dev/null
          done